### Siddhanta Choudhury
image : https://imgur.com/a/odZImvZ
location : india
github : https://github.com/akashranjanpatel


#include<stdio.h>
#include<stdlib.h>

#define size 5

struct circularqueue {

    int front, rear;
    int queue[size];
};

typedef struct circularqueue cq;

cq q = { .front = -1 , .rear = -1};

void Enqueue( int val);
int Dequeue();
void display();

int main() {

    int choice,val;

    puts("Implementation of a circular queue");
    puts("1.Enqueue");
    puts("2.Dequeue");
    puts("3.Display");
    puts("4.Exit");

    while ( 1 )
    {
        printf("\nEnter your choice\n");
        scanf("%d",&choice);

        switch ( choice )
        {
        case 1:
            {
                printf("Enter a data\n");
                scanf("%d",&val);

                Enqueue(val);
                break;
            }
        case 2:
            {
                Dequeue();
                break;
            }
        case 3:
            {
                display();
                break;
            }
        case 4:
            {
                exit(0);
            }
        default:
            {
                printf("Wrong choice");
                exit(2);
            }
        }
    }



    return 0;
}

void Enqueue( int val) {

    if ( q.rear == size - 1 && q.front == 0  || q.front == q.rear + 1) {

        printf("Queue is full.");
        exit(0);

    } else if ( q.rear == -1 && q.front == -1 ) {
        q.rear = 0;
        q.front = 0;
        q.queue[q.rear] = val;

    } else if ( q.rear == size - 1 && q.front != 0 ) {
        q.rear = 0;
        q.queue[q.rear] = val;

    } else {
        q.queue[++q.rear] = val;
    }


}

int Dequeue() {

    if ( q.front == -1 && q.rear == -1 ) {
        printf("Queue is empty.");
        exit(0);
    } else if ( q.rear == q.front ) {
        q.front = -1;
        q.rear = -1;
    } else {
        if ( q.front == size - 1 )
        {
            q.front = 0;
        }
        return q.queue[q.front++];
    }
}

void display() {

     int i ;

    printf("Queue is\n");

    if(q.front<=q.rear)
    {
        for(i=q.front;i<=q.rear;i++)
            printf("\t %d", q.queue[i]);
    }
    else
    {
        for(i=q.front;i<size;i++)
            printf("\t %d", q.queue[i]);
        for(i=0;i<=q.rear;i++)
            printf("\t %d", q.queue[i]);
    }


}
